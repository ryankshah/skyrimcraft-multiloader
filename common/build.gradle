plugins {
    id 'multiloader-common'
    id 'net.neoforged.moddev'
}

repositories {
    mavenCentral()
    maven {
        url = "https://jm.gserv.me/repository/maven-public/"
    }
    maven {
        name = 'GeckoLib'
        url 'https://dl.cloudsmith.io/public/geckolib3/geckolib/maven/'
        content {
            includeGroup("software.bernie.geckolib")
        }
    }
    maven {
        name = "SmartBrainLib (SBL) Maven Repo"
        url = "https://dl.cloudsmith.io/public/tslat/sbl/maven/"
    }
}

neoForge {
    neoFormVersion = neo_form_version
    // Automatically enable AccessTransformers if the file exists
    def at = file('src/main/resources/META-INF/accesstransformer.cfg')
    if (at.exists()) {
        accessTransformers.from(at.absolutePath)
    }
    parchment {
        minecraftVersion = parchment_minecraft
        mappingsVersion = parchment_version
    }
}

sourceSets.main.resources { srcDir file('../common/src/generated/resources').getAbsolutePath() }

dependencies {
    compileOnly group: 'org.spongepowered', name: 'mixin', version: '0.8.5'
    // fabric and neoforge both bundle mixinextras, so it is safe to use it in common
    compileOnly group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'
    annotationProcessor group: 'io.github.llamalad7', name: 'mixinextras-common', version: '0.3.5'

    implementation 'mysticdrew:common-networking-common:1.0.16-1.21'
    implementation "software.bernie.geckolib:geckolib-common-${geckolib_version}"
    implementation "net.tslat.smartbrainlib:SmartBrainLib-common-1.21:${sbl_version}"
}

configurations.all {
    // Check for snapshots more frequently than Gradle's default of 1 day. 0 = every build.
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}

configurations {
    commonJava {
        canBeResolved = false
        canBeConsumed = true
    }
    commonResources {
        canBeResolved = false
        canBeConsumed = true
    }
}

//artifacts {
//    commonJava sourceSets.main.java.sourceDirectories.singleFile
//    commonResources sourceSets.main.resources.sourceDirectories.singleFile
//}

artifacts {
    commonJava sourceSets.main.java.sourceDirectories.singleFile
    for (def dir : sourceSets.main.resources.sourceDirectories.files) {
        commonResources dir
    }
}